import "@testing-library/jest-dom";

// üõ† –ò—Å–ø—Ä–∞–≤–ª—è–µ–º Request, Response, Headers –¥–ª—è fetchBaseQuery
global.Request = global.Request || class {};
global.Response =
  global.Response ||
  class {
    clone() {
      return this;
    }
  };
global.Headers = global.Headers || class {};

// üîç –ú–æ–∫ fetch
global.fetch = jest.fn(() =>
  Promise.resolve({
    json: () => Promise.resolve({}),
  })
) as jest.Mock;

beforeAll(() => {
  global.fetch = jest.fn(() =>
    Promise.resolve({
      json: () => Promise.resolve({}),
    })
  ) as jest.Mock;
});

afterAll(() => {
  jest.clearAllMocks();
});

// üîç –ú–æ–∫ localStorage –∏ sessionStorage
Object.defineProperty(global, "localStorage", {
  value: {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn(),
  },
  writable: true,
});

Object.defineProperty(global, "sessionStorage", {
  value: {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn(),
  },
  writable: true,
});

// üîç –ú–æ–∫ ResizeObserver (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ @hello-pangea/dnd)
class ResizeObserverMock {
  observe() {}
  unobserve() {}
  disconnect() {}
}

global.ResizeObserver = global.ResizeObserver || ResizeObserverMock;

// üîç –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–æ–∫ IntersectionObserver
global.IntersectionObserver = class {
  root: Element | null = null;
  rootMargin: string = "";
  thresholds: number[] = [];

  constructor(callback: IntersectionObserverCallback) {
    this.callback = callback;
  }

  callback: IntersectionObserverCallback;

  observe(target: Element) {
    this.callback(
      [
        {
          target,
          isIntersecting: true,
          time: Date.now(), // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ time
          boundingClientRect: target.getBoundingClientRect(), // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º boundingClientRect
          intersectionRatio: 1, // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º intersectionRatio
          intersectionRect: target.getBoundingClientRect(), // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º intersectionRect
          rootBounds: null, // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º rootBounds (–º–æ–∂–µ—Ç –±—ã—Ç—å null)
        } as IntersectionObserverEntry,
      ],
      this
    );
  }

  unobserve() {}

  disconnect() {}

  takeRecords(): IntersectionObserverEntry[] {
    return [];
  }
};
