import { createSlice, PayloadAction } from "@reduxjs/toolkit";

/**
 * üìå –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–¥–∞—á–∏ (Issue)
 */
export interface Issue {
  id: number;
  title: string;
  number: number;
  user: { login: string };
  comments: number;
  state: "open" | "closed";
  assignee?: { login: string } | null;
}

/**
 * üìå –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
 */
export interface IssuesState {
  todo: Issue[];
  inProgress: Issue[];
  done: Issue[];
}

/**
 * üìå –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ Redux
 */
const initialState: IssuesState = {
  todo: [],
  inProgress: [],
  done: [],
};

const issuesSlice = createSlice({
  name: "issues",
  initialState,
  reducers: {
    /**
     * üìå –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑ API.
     */
    setIssues: (state, action: PayloadAction<Issue[]>) => {
      state.todo = action.payload.filter(
        (issue) => !issue.assignee && issue.state === "open"
      );
      state.inProgress = action.payload.filter(
        (issue) => issue.assignee && issue.state === "open"
      );
      state.done = action.payload.filter((issue) => issue.state === "closed");
    },

    /**
     * üìå –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –º–µ–∂–¥—É –∫–æ–ª–æ–Ω–∫–∞–º–∏
     */
    moveIssue: (
      state,
      action: PayloadAction<{ id: number; to: keyof IssuesState }>
    ) => {
      const { id, to } = action.payload;

      console.log("moveIssue action:", action.payload);
      console.log("Current state:", JSON.parse(JSON.stringify(state)));

      // üü¢ –ù–∞—Ö–æ–¥–∏–º, –≤ –∫–∞–∫–æ–π –∫–æ–ª–æ–Ω–∫–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–∞–¥–∞—á–∞
      let fromColumn: keyof IssuesState | null = null;
      let movedIssue: Issue | undefined;

      Object.keys(state).forEach((key) => {
        const column = key as keyof IssuesState;
        const index = state[column].findIndex((issue) => issue.id === id);
        if (index !== -1) {
          fromColumn = column;
          [movedIssue] = state[column].splice(index, 1);
        }
      });

      if (!fromColumn || !movedIssue) {
        console.error(`‚ùå Issue with id ${id} not found.`);
        return;
      }

      console.log(`‚úÖ Moving issue ${id} from ${fromColumn} to ${to}`);

      // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º `state` –∏ `assignee` –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–µ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
      movedIssue.state = to === "done" ? "closed" : "open";
      movedIssue.assignee = to === "inProgress" ? { login: "user" } : null;

      // üü¢ –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –Ω–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É
      state[to].push(movedIssue);
    },
  },
});

export const { setIssues, moveIssue } = issuesSlice.actions;
export default issuesSlice.reducer;
